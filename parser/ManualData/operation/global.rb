class ManualData
  def getGlobalOperatorReplacements
    [
       ['ELSE If', 'ELSE IF'],
       [' IF ', "\nIF "],
       ['FI;rel/abs', 'FI; (* relative/absolute *)'],
       ['FI; near', 'FI; (* near *)'],
       ['*) ', "*)\n"],
       [/; [^\(]/, lambda { |x| x[0].gsub(' ', "\n") }],
       [' THEN', "\nTHEN"],
       ["THEN DEST = temp;\nFI;", 'THEN DEST = temp;'],
       ['IF DF = 0 (', "IF DF = 0\n("],
       [/\([A-Za-z][a-z]+ comparison\)/, lambda { |x| createComment(x[0][1..-2]) }],
       [' THEN', ''],
       ["\nTHEN\n", "\n"],
       ['THEN ', ''],
       ['ELSE (* Non-64-bit Mode *)', "FI;\nFI;\nELSE (* Non-64-bit Mode *)"],
       ["multiplication;\n", 'multiplication; '],
       #for the INT 3 thing
       ["&\n", '& '],
       [/<Link>.+?<\/Link>/m, lambda { |x| x[0][6..-8] }],
       [/\(\*.+?\*\)/m, lambda { |x| x[0].gsub("\n", '') }],
       ["=\n", '= '],
       ["\n\n", "\n"],
       [/\[\d+\s*:\s*\d+\]/, lambda { |x| x[0].gsub(' ', '') }],
       [/(^(BIT_REFLECT|MOD2).+)|Non-64-bit Mode:|FI64-bit Mode:/, method(:createComment)],
       #risky?
       ['H: ', "H:\n"],
       ['* BREAKEAX = 4H:', "*)\nBREAK;\nEAX = 4H:"],
       ['ELSE ', "ELSE\n"],
       [' ELSE', "\nELSE"],
       [' FI;', "\nFI;"],
       #['IF (', 'IF('],
       ['( ', '('],
       [' )', ')'],
       ['ELES', 'ELSE'],
       ['EASC', 'ESAC'],
       ['ESAC:', 'ESAC;'],
       ['[ ', '['],
       [' ]', ']'],
       [/^[A-Z]+ (instruction )?(with|for) \d+[- ][Bb]it.+?operand.*$/, method(:createComment)],
       [/^(64-BIT_MODE|64-bit Mode:)$/, method(:createComment)],
       ['ELSEIF', "ELSE\nIF"],
       ['ELSIF', "ELSE\nIF"],
       [/,[^ ]/, lambda { |x| ', ' + x[0][1..-1] }],
       [';FI;', ";\nFI;"],
       ['FI;FI;', "FI;\nFI;"],
       [';(*', '; (*'],
       ['*)IF', "*)\nIF"],
       [/[^ ]\*\)/, lambda { |x| x[0][0] + ' *)' }],
       ["\nDO\n", "\n"],
       ["\nOD;", ''],
       [/\/\/ *.+/, lambda { |x| createComment(x[0][2..-1].strip) }],
       ["\t", ''],
       [/ +/, ' '],
       #["*) ", "*)\n"],
       [/[^ =!]=/, lambda { |x| x[0][0] + ' =' }],
       [/=[^ =!]/, lambda { |x| '= ' + x[0][-1]  }],
       [/ (or|OR|and|AND)\n/, lambda { |x| x[0][0..-2] + ' ' }],
       ['> =', '>='],
       ['< =', '<='],
      ]
  end
end
